#ifndef COREINIT_ENUM_H
#define COREINIT_ENUM_H

#include <common/enum_start.h>

ENUM_NAMESPACE_BEG(coreinit)

ENUM_BEG(COSReportLevel, uint32_t)
   ENUM_VALUE(Error,             0)
   ENUM_VALUE(Warn,              1)
   ENUM_VALUE(Info,              2)
   ENUM_VALUE(Verbose,           3)
ENUM_END(COSReportLevel)

ENUM_BEG(HardwareVersion, uint32_t)
   ENUM_VALUE(UNKNOWN,                       0x00000000)

   // vWii Hardware Versions
   ENUM_VALUE(HOLLYWOOD_ENG_SAMPLE_1,        0x00000001)
   ENUM_VALUE(HOLLYWOOD_ENG_SAMPLE_2,        0x10000001)
   ENUM_VALUE(HOLLYWOOD_PROD_FOR_WII,        0x10100001)
   ENUM_VALUE(HOLLYWOOD_CORTADO,             0x10100008)
   ENUM_VALUE(HOLLYWOOD_CORTADO_ESPRESSO,    0x1010000C)
   ENUM_VALUE(BOLLYWOOD,                     0x20000001)
   ENUM_VALUE(BOLLYWOOD_PROD_FOR_WII,        0x20100001)

   // WiiU Hardware Versions
   ENUM_VALUE(LATTE_A11_EV,                  0x21100010)
   ENUM_VALUE(LATTE_A11_CAT,                 0x21100020)
   ENUM_VALUE(LATTE_A12_EV,                  0x21200010)
   ENUM_VALUE(LATTE_A12_CAT,                 0x21200020)
   ENUM_VALUE(LATTE_A2X_EV,                  0x22100010)
   ENUM_VALUE(LATTE_A2X_CAT,                 0x22100020)
   ENUM_VALUE(LATTE_A3X_EV,                  0x23100010)
   ENUM_VALUE(LATTE_A3X_CAT,                 0x23100020)
   ENUM_VALUE(LATTE_A3X_CAFE,                0x23100028)
   ENUM_VALUE(LATTE_A4X_EV,                  0x24100010)
   ENUM_VALUE(LATTE_A4X_CAT,                 0x24100020)
   ENUM_VALUE(LATTE_A4X_CAFE,                0x24100028)
   ENUM_VALUE(LATTE_A5X_EV,                  0x25100010)
   ENUM_VALUE(LATTE_A5X_EV_Y,                0x25100011)
   ENUM_VALUE(LATTE_A5X_CAT,                 0x25100020)
   ENUM_VALUE(LATTE_A5X_CAFE,                0x25100028)
   ENUM_VALUE(LATTE_B1X_EV,                  0x26100010)
   ENUM_VALUE(LATTE_B1X_EV_Y,                0x26100011)
   ENUM_VALUE(LATTE_B1X_CAT,                 0x26100020)
   ENUM_VALUE(LATTE_B1X_CAFE,                0x26100028)
ENUM_END(HardwareVersion)

ENUM_BEG(IMError, int32_t)
   ENUM_VALUE(OK,                  0)
ENUM_END(IMError)

ENUM_BEG(IPCDriverStatus, uint32_t)
   ENUM_VALUE(Closed,               1)
   ENUM_VALUE(Initialised,          2)
   ENUM_VALUE(Open,                 3)
ENUM_END(IPCDriverStatus)

ENUM_BEG(OSAlarmState, uint32_t)
   ENUM_VALUE(None,                 0)
   ENUM_VALUE(Set,                  1)
   ENUM_VALUE(Expired,              2)
ENUM_END(OSAlarmState)

ENUM_BEG(OSDeviceID, uint32_t)
   ENUM_VALUE(VI,                   3)
   ENUM_VALUE(SI,                   6)
ENUM_END(OSDeviceID)

ENUM_BEG(OSEventMode, uint32_t)
   //! A manual event will only reset when OSResetEvent is called.
   ENUM_VALUE(ManualReset,          0)

   //! An auto event will reset everytime a thread is woken.
   ENUM_VALUE(AutoReset,            1)
ENUM_END(OSEventMode)

ENUM_BEG(OSExceptionType, uint32_t)
   ENUM_VALUE(SystemReset,          0)
   ENUM_VALUE(MachineCheck,         1)
   ENUM_VALUE(DSI,                  2)
   ENUM_VALUE(ISI,                  3)
   ENUM_VALUE(ExternalInterrupt,    4)
   ENUM_VALUE(Alignment,            5)
   ENUM_VALUE(Program,              6)
   ENUM_VALUE(FloatingPoint,        7)
   ENUM_VALUE(Decrementer,          8)
   ENUM_VALUE(SystemCall,           9)
   ENUM_VALUE(Trace,                10)
   ENUM_VALUE(PerformanceMonitor,   11)
   ENUM_VALUE(Breakpoint,           12)
   ENUM_VALUE(SystemInterrupt,      13)
   ENUM_VALUE(ICI,                  14)
   ENUM_VALUE(Max,                  15)
ENUM_END(OSExceptionType)

ENUM_BEG(OSFunctionType, uint32_t)
   ENUM_VALUE(HioOpen,              1)
   ENUM_VALUE(HioReadAsync,         2)
   ENUM_VALUE(HioWriteAsync,        3)
   ENUM_VALUE(FsaCmdAsync,          4)
   ENUM_VALUE(FsaPrCmdAsync,        5)
   ENUM_VALUE(FsaPrCmdAsyncNoAlloc, 6)
   ENUM_VALUE(FsaAttachEvent,       7)
   ENUM_VALUE(FsCmdAsync,           8)
   ENUM_VALUE(FsCmdHandler,         9)
   ENUM_VALUE(FsAttachEvent,        10)
   ENUM_VALUE(FsStateChangeEvent,   11)
ENUM_END(OSFunctionType)

ENUM_BEG(OSMemoryType, uint32_t)
   ENUM_VALUE(MEM1,                 1)
   ENUM_VALUE(MEM2,                 2)
ENUM_END(OSMemoryType)

ENUM_BEG(OSMessageFlags, uint32_t)
   ENUM_VALUE(None,                 0)
   ENUM_VALUE(Blocking,             1 << 0)
   ENUM_VALUE(HighPriority,         1 << 1)
ENUM_END(OSMessageFlags)

ENUM_BEG(OSSharedDataType, uint32_t)
   ENUM_VALUE(FontChinese,          0)
   ENUM_VALUE(FontKorean,           1)
   ENUM_VALUE(FontStandard,         2)
   ENUM_VALUE(FontTaiwanese,        3)
ENUM_END(OSSharedDataType)

ENUM_BEG(OSShutdownReason, uint32_t)
   ENUM_VALUE(NoShutdown,           0)
ENUM_END(OSShutdownReason)

ENUM_BEG(OSThreadAttributes, uint8_t)
   //! Allow the thread to run on CPU0.
   ENUM_VALUE(AffinityCPU0,         1 << 0)

   //! Allow the thread to run on CPU1.
   ENUM_VALUE(AffinityCPU1,         1 << 1)

   //! Allow the thread to run on CPU2.
   ENUM_VALUE(AffinityCPU2,         1 << 2)

   //! Allow the thread to run any CPU.
   ENUM_VALUE(AffinityAny,          (1 << 0) | (1 << 1) | (1 << 2))

   //! Start the thread detached.
   ENUM_VALUE(Detached,             1 << 3)

   //! Enables tracking of stack usage.
   ENUM_VALUE(StackUsage,           1 << 5)
ENUM_END(OSThreadAttributes)

ENUM_BEG(OSThreadCancelState, uint32_t)
   //! Thread cancel is enabled
   ENUM_VALUE(Enabled,              0)

   //! Thread cancel is disabled by OSSetThreadCancelState
   ENUM_VALUE(Disabled,             1 << 0)

   //! Thread cancel is disabled because the thread owns a mutex
   ENUM_VALUE(DisabledByMutex,      1 << 16)

   //! Thread cancel is disabled because the thread owns an uninterruptible spinlock
   ENUM_VALUE(DisabledBySpinlock,   1 << 17)

   //! Thread cancel is disabled because the thread owns a fast mutex
   ENUM_VALUE(DisabledByFastMutex,  1 << 19)
ENUM_END(OSThreadCancelState)

ENUM_BEG(OSThreadRequest, uint32_t)
   ENUM_VALUE(None,                 0)
   ENUM_VALUE(Suspend,              1)
   ENUM_VALUE(Cancel,               2)
ENUM_END(OSThreadRequest)

ENUM_BEG(OSThreadState, uint8_t)
   ENUM_VALUE(None,                 0)

   //! Thread is ready to run
   ENUM_VALUE(Ready,                1 << 0)

   //! Thread is running
   ENUM_VALUE(Running,              1 << 1)

   //! Thread is waiting, i.e. on a mutex
   ENUM_VALUE(Waiting,              1 << 2)

   //! Thread is about to terminate
   ENUM_VALUE(Moribund,             1 << 3)
ENUM_END(OSThreadState)

ENUM_BEG(FSACommand, uint32_t)
   ENUM_VALUE(Invalid,                 0x0)
   ENUM_VALUE(Mount,                   0x1)
   ENUM_VALUE(Unmount,                 0x2)
   ENUM_VALUE(GetVolumeInfo,           0x3)
   ENUM_VALUE(GetAttach,               0x4)
   ENUM_VALUE(ChangeDir,               0x5)
   ENUM_VALUE(GetCwd,                  0x6)
   ENUM_VALUE(MakeDir,                 0x7)
   ENUM_VALUE(Remove,                  0x8)
   ENUM_VALUE(Rename,                  0x9)
   ENUM_VALUE(OpenDir,                 0xA)
   ENUM_VALUE(ReadDir,                 0xB)
   ENUM_VALUE(RewindDir,               0xC)
   ENUM_VALUE(CloseDir,                0xD)
   ENUM_VALUE(OpenFile,                0xE)
   ENUM_VALUE(ReadFile,                0xF)
   ENUM_VALUE(WriteFile,               0x10)
   ENUM_VALUE(GetPosFile,              0x11)
   ENUM_VALUE(SetPosFile,              0x12)
   ENUM_VALUE(IsEof,                   0x13)
   ENUM_VALUE(StatFile,                0x14)
   ENUM_VALUE(CloseFile,               0x15)
   ENUM_VALUE(GetError,                0x16)
   ENUM_VALUE(FlushFile,               0x17)
   ENUM_VALUE(GetInfoByQuery,          0x18)
   ENUM_VALUE(AppendFile,              0x19)
   ENUM_VALUE(TruncateFile,            0x1A)
   ENUM_VALUE(FlushVolume,             0x1B)
   ENUM_VALUE(RollbackVolume,          0x1C)
   ENUM_VALUE(MakeQuota,               0x1D)
   ENUM_VALUE(FlushQuota,              0x1E)
   ENUM_VALUE(RollbackQuota,           0x1F)
   ENUM_VALUE(ChangeMode,              0x20)
   ENUM_VALUE(OpenFileByStat,          0x21)
   ENUM_VALUE(RegisterFlushQuota,      0x22)
   ENUM_VALUE(FlushMultiQuota,         0x23)
   ENUM_VALUE(GetFileBlockAddress,     0x25)
   ENUM_VALUE(AddUserProcess,          0x65)
   ENUM_VALUE(DelUserProcess,          0x66)
   ENUM_VALUE(MountWithProcess,        0x67)
   ENUM_VALUE(UnmountWithProcess,      0x68)
   ENUM_VALUE(Format,                  0x69)
   ENUM_VALUE(RawOpen,                 0x6A)
   ENUM_VALUE(RawRead,                 0x6B)
   ENUM_VALUE(RawWrite,                0x6C)
   ENUM_VALUE(RawClose,                0x6D)
   ENUM_VALUE(GetLastFailedVolume,     0x6E)
   ENUM_VALUE(GetVolumeExistence,      0x6F)
   ENUM_VALUE(ChangeOwner,             0x70)
   ENUM_VALUE(CancelGetAttach,         0x71)
   ENUM_VALUE(RemoveQuota,             0x72)
   ENUM_VALUE(SetClientPriority,       0x73)
   ENUM_VALUE(ApplyMemoryCache,        0x74)
   ENUM_VALUE(MakeLink,                0x75)
   ENUM_VALUE(XferParams,              0x76)
   ENUM_VALUE(ExecDebugProc,           0x78)
   ENUM_VALUE(DebugSetTitleID,         0x79)
   ENUM_VALUE(DebugSetCapability,      0x7A)
   ENUM_VALUE(SetProcessConfig,        0x82)
   ENUM_VALUE(ConfigSetMemoryCache,    0x83)
   ENUM_VALUE(ConfigUnsetMemoryCache,  0x84)
   ENUM_VALUE(ConfigSetPrf2CharCode,   0x85)
   ENUM_VALUE(GetProcResourceUsage,    0x8C)
   ENUM_VALUE(GetAllResourceUsage,     0x8D)
   ENUM_VALUE(SendProfileCmd,          0x8E)
ENUM_END(FSACommand)

ENUM_BEG(FSAMediaState, uint32_t)
   ENUM_VALUE(Ready,                   0)
   ENUM_VALUE(NoMedia,                 1)
   ENUM_VALUE(InvalidMedia,            2)
   ENUM_VALUE(DirtyMedia,              3)
   ENUM_VALUE(MediaError,              4)
ENUM_END(FSAMediaState)

ENUM_BEG(FSAIpcRequestType, uint16_t)
   ENUM_VALUE(Ioctl,                   0)
   ENUM_VALUE(Ioctlv,                  1)
ENUM_END(FSAIpcRequestType)

ENUM_BEG(FSAStatus, int32_t)
   ENUM_VALUE(OK,                      0)
   ENUM_VALUE(NotInit,                 -0x30001)
   ENUM_VALUE(Busy,                    -0x30002)
   ENUM_VALUE(Cancelled,               -0x30003)
   ENUM_VALUE(EndOfDir,                -0x30004)
   ENUM_VALUE(EndOfFile,               -0x30005)
   ENUM_VALUE(MaxMountpoints,          -0x30010)
   ENUM_VALUE(MaxVolumes,              -0x30011)
   ENUM_VALUE(MaxClients,              -0x30012)
   ENUM_VALUE(MaxFiles,                -0x30013)
   ENUM_VALUE(MaxDirs,                 -0x30014)
   ENUM_VALUE(AlreadyOpen,             -0x30015)
   ENUM_VALUE(AlreadyExists,           -0x30016)
   ENUM_VALUE(NotFound,                -0x30017)
   ENUM_VALUE(NotEmpty,                -0x30018)
   ENUM_VALUE(AccessError,             -0x30019)
   ENUM_VALUE(PermissionError,         -0x3001a)
   ENUM_VALUE(DataCorrupted,           -0x3001b)
   ENUM_VALUE(StorageFull,             -0x3001c)
   ENUM_VALUE(JournalFull,             -0x3001d)
   ENUM_VALUE(LinkEntry,               -0x3001e)
   ENUM_VALUE(UnavailableCmd,          -0x3001f)
   ENUM_VALUE(UnsupportedCmd,          -0x30020)
   ENUM_VALUE(InvalidParam,            -0x30021)
   ENUM_VALUE(InvalidPath,             -0x30022)
   ENUM_VALUE(InvalidBuffer,           -0x30023)
   ENUM_VALUE(InvalidAlignment,        -0x30024)
   ENUM_VALUE(InvalidClientHandle,     -0x30025)
   ENUM_VALUE(InvalidFileHandle,       -0x30026)
   ENUM_VALUE(InvalidDirHandle,        -0x30027)
   ENUM_VALUE(NotFile,                 -0x30028)
   ENUM_VALUE(NotDir,                  -0x30029)
   ENUM_VALUE(FileTooBig,              -0x3002a)
   ENUM_VALUE(OutOfRange,              -0x3002b)
   ENUM_VALUE(OutOfResources,          -0x3002c)
   ENUM_VALUE(MediaNotReady,           -0x30040)
   ENUM_VALUE(MediaError,              -0x30041)
   ENUM_VALUE(WriteProtected,          -0x30042)
   ENUM_VALUE(InvalidMedia,            -0x30043)
ENUM_END(FSAStatus)

ENUM_BEG(FSCmdBlockStatus, uint32_t)
   ENUM_VALUE(Initialised,             0xD900A21)
   ENUM_VALUE(QueuedCommand,           0xD900A22)
   ENUM_VALUE(DeqeuedCommand,          0xD900A23)
   ENUM_VALUE(Cancelled,               0xD900A24)
   ENUM_VALUE(Completed,               0xD900A26)
ENUM_END(FSCmdBlockStatus)

ENUM_BEG(FSCmdCancelFlags, uint32_t)
   ENUM_VALUE(None,                    0)
   ENUM_VALUE(Cancelling,              1)
ENUM_END(FSCmdCancelFlags)

ENUM_BEG(FSCmdQueueStatus, uint32_t)
   ENUM_VALUE(MaxActiveCommands,       1)
   ENUM_VALUE(Suspended,               0x10)
ENUM_END(FSCmdQueueStatus)

ENUM_BEG(FSErrorFlag, uint32_t)
   ENUM_VALUE(None,                    0x0)
   ENUM_VALUE(Max,                     0x1)
   ENUM_VALUE(AlreadyOpen,             0x2)
   ENUM_VALUE(Exists,                  0x4)
   ENUM_VALUE(NotFound,                0x8)
   ENUM_VALUE(NotFile,                 0x10)
   ENUM_VALUE(NotDir,                  0x20)
   ENUM_VALUE(AccessError,             0x40)
   ENUM_VALUE(PermissionError,         0x80)
   ENUM_VALUE(FileTooBig,              0x100)
   ENUM_VALUE(StorageFull,             0x200)
   ENUM_VALUE(UnsupportedCmd,          0x400)
   ENUM_VALUE(JournalFull,             0x800)
   ENUM_VALUE(All,                     0xFFFFFFFF)
ENUM_END(FSErrorFlag)

ENUM_BEG(FSQueryInfoType, uint32_t)
   ENUM_VALUE(FreeSpaceSize,           0)
   ENUM_VALUE(DirSize,                 1)
   ENUM_VALUE(EntryNum,                2)
   ENUM_VALUE(FileSystemInfo,          3)
   ENUM_VALUE(DeviceInfo,              4)
   ENUM_VALUE(Stat,                    5)
   ENUM_VALUE(BadBlockInfo,            6)
   ENUM_VALUE(JournalFreeSpaceSize,    7)
   ENUM_VALUE(FragmentBlockInfo,       8)
ENUM_END(FSQueryInfoType)

ENUM_BEG(FSReadFlag, uint32_t)
   ENUM_VALUE(ReadWithPos,             0x1)
ENUM_END(FSReadFlag)

ENUM_BEG(FSStatus, int32_t)
   ENUM_VALUE(OK,                   0)
   ENUM_VALUE(Cancelled,            -1)
   ENUM_VALUE(End,                  -2)
   ENUM_VALUE(Max,                  -3)
   ENUM_VALUE(AlreadyOpen,          -4)
   ENUM_VALUE(Exists,               -5)
   ENUM_VALUE(NotFound,             -6)
   ENUM_VALUE(NotFile,              -7)
   ENUM_VALUE(NotDirectory,         -8)
   ENUM_VALUE(AccessError,          -9)
   ENUM_VALUE(PermissionError,      -10)
   ENUM_VALUE(FileTooBig,           -11)
   ENUM_VALUE(StorageFull,          -12)
   ENUM_VALUE(JournalFull,          -13)
   ENUM_VALUE(UnsupportedCmd,       -14)
   ENUM_VALUE(MediaNotReady,        -15)
   ENUM_VALUE(MediaError,           -17)
   ENUM_VALUE(Corrupted,            -18)
   ENUM_VALUE(FatalError,           -0x400)
ENUM_END(FSStatus)

ENUM_BEG(FSStatFlags, uint32_t)
   ENUM_VALUE(Directory,            0x80000000)
ENUM_END(FSStatFlags)

ENUM_BEG(FSVolumeState, uint32_t)
   ENUM_VALUE(Initial,              0)
   ENUM_VALUE(Ready,                1)
   ENUM_VALUE(NoMedia,              2)
   ENUM_VALUE(InvalidMedia,         3)
   ENUM_VALUE(DirtyMedia,           4)
   ENUM_VALUE(WrongMedia,           5)
   ENUM_VALUE(MediaError,           6)
   ENUM_VALUE(DataCorrupted,        7)
   ENUM_VALUE(WriteProtected,       8)
   ENUM_VALUE(JournalFull,          9)
   ENUM_VALUE(Fatal,                10)
   ENUM_VALUE(Invalid,              11)
ENUM_END(FSVolumeState)

ENUM_BEG(FSWriteFlag, uint32_t)
   ENUM_VALUE(WriteWithPos,         0x1)
ENUM_END(FSWriteFlag)

ENUM_BEG(GHSSyscallID, uint32_t)
   ENUM_VALUE(time,                 0x0000E)
   ENUM_VALUE(close,                0x20005)
   ENUM_VALUE(unlink,               0x20008)
   ENUM_VALUE(system,               0x2000A)
   ENUM_VALUE(creat,                0x30006)
   ENUM_VALUE(access,               0x3000B)
   ENUM_VALUE(read,                 0x40000)
   ENUM_VALUE(write,                0x40001)
   ENUM_VALUE(open,                 0x40004)
   ENUM_VALUE(lseek,                0x40007)
   ENUM_VALUE(fnctl,                0x40012)
   ENUM_VALUE(fstat,                0x40018)
   ENUM_VALUE(stat,                 0x40019)
ENUM_END(GHSSyscallID)

ENUM_BEG(MCPError, int32_t)
   ENUM_VALUE(OK,                   0)
   ENUM_VALUE(AllocFailed,          -0x40003)
   ENUM_VALUE(InvalidBuffer,        -0x40005)
ENUM_END(MCPError)

ENUM_BEG(MEMBaseHeapType, uint32_t)
   ENUM_VALUE(MEM1,                 0)
   ENUM_VALUE(MEM2,                 1)
   ENUM_VALUE(FG,                   8)
   ENUM_VALUE(Max,                  9)
   ENUM_VALUE(Invalid,              10)
ENUM_END(MEMBaseHeapType)

ENUM_BEG(MEMExpHeapMode, uint32_t)
   ENUM_VALUE(FirstFree,            0)
   ENUM_VALUE(NearestSize,          1)
ENUM_END(MEMExpHeapMode)

ENUM_BEG(MEMExpHeapDirection, uint32_t)
   ENUM_VALUE(FromStart,            0)
   ENUM_VALUE(FromEnd,              1)
ENUM_END(MEMExpHeapDirection)

ENUM_BEG(MEMFrameHeapFreeMode, uint32_t)
   ENUM_VALUE(Head,                 1 << 0)
   ENUM_VALUE(Tail,                 1 << 1)
ENUM_END(MEMFrameHeapFreeMode)

ENUM_BEG(MEMHeapTag, uint32_t)
   ENUM_VALUE(ExpandedHeap,         0x45585048)
   ENUM_VALUE(FrameHeap,            0x46524D48)
   ENUM_VALUE(UnitHeap,             0x554E5448)
   ENUM_VALUE(UserHeap,             0x55535248)
   ENUM_VALUE(BlockHeap,            0x424C4B48)
ENUM_END(MEMHeapTag)

ENUM_BEG(MEMHeapFillType, uint32_t)
   ENUM_VALUE(Unused,               0x0)
   ENUM_VALUE(Allocated,            0x1)
   ENUM_VALUE(Freed,                0x2)
   ENUM_VALUE(Max,                  0x3)
ENUM_END(MEMHeapFillType)

ENUM_BEG(MEMProtectMode, uint32_t)
   ENUM_VALUE(ReadOnly,             1 << 0)
   ENUM_VALUE(ReadWrite,            1 << 1)
ENUM_END(MEMProtectMode)

ENUM_BEG(MPTaskQueueState, uint32_t)
   ENUM_VALUE(Initialised,          1 << 0)
   ENUM_VALUE(Ready,                1 << 1)
   ENUM_VALUE(Stopping,             1 << 2)
   ENUM_VALUE(Stopped,              1 << 3)
   ENUM_VALUE(Finished,             1 << 4)
ENUM_END(MPTaskQueueState)

ENUM_BEG(MPTaskState, uint32_t)
   ENUM_VALUE(Initialised,          1 << 0)
   ENUM_VALUE(Ready,                1 << 1)
   ENUM_VALUE(Running,              1 << 2)
   ENUM_VALUE(Finished,             1 << 3)
ENUM_END(MPTaskState)

ENUM_BEG(SCICountryCode, uint32_t)
   ENUM_VALUE(USA,                  0x31)
   ENUM_VALUE(UnitedKingdom,        0x63)
ENUM_END(SCICountryCode)

ENUM_BEG(SCILanguage, uint32_t)
   ENUM_VALUE(Japanese,             0x00)
   ENUM_VALUE(English,              0x01)
   ENUM_VALUE(French,               0x02)
   ENUM_VALUE(German,               0x03)
   ENUM_VALUE(Italian,              0x04)
   ENUM_VALUE(Spanish,              0x05)
   ENUM_VALUE(Chinese,              0x06)
   ENUM_VALUE(Korean,               0x07)
   ENUM_VALUE(Dutch,                0x08)
   ENUM_VALUE(Portugese,            0x09)
   ENUM_VALUE(Russian,              0x0A)
   ENUM_VALUE(Taiwanese,            0x0B)
   ENUM_VALUE(Max,                  0x0C)
ENUM_END(SCILanguage)

ENUM_BEG(SCIRegion, uint8_t)
   ENUM_VALUE(JAP,                  0x01)
   ENUM_VALUE(USA,                  0x02)
   ENUM_VALUE(EUR,                  0x04)
ENUM_END(SCIRegion)

ENUM_BEG(SIRegisters, uint32_t)
   ENUM_VALUE(Controller0Command,   0)
   ENUM_VALUE(Controller0Status0,   1)
   ENUM_VALUE(Controller0Status1,   2)
   ENUM_VALUE(Controller1Command,   3)
   ENUM_VALUE(Controller1Status0,   4)
   ENUM_VALUE(Controller1Status1,   5)
   ENUM_VALUE(Controller2Command,   6)
   ENUM_VALUE(Controller2Status0,   7)
   ENUM_VALUE(Controller2Status1,   8)
   ENUM_VALUE(Controller3Command,   9)
   ENUM_VALUE(Controller3Status0,   10)
   ENUM_VALUE(Controller3Status1,   11)
   ENUM_VALUE(PollControl,          12)
   ENUM_VALUE(DeviceStatus,         13)
   ENUM_VALUE(ControllerError,      14)
ENUM_END(SIRegisters)

ENUM_BEG(UCDataType, uint32_t)
   ENUM_VALUE(Uint8,                0x01)
   ENUM_VALUE(Uint16,               0x02)
   ENUM_VALUE(Uint32,               0x03)
   ENUM_VALUE(Blob,                 0x07)
   ENUM_VALUE(Group,                0x08)
ENUM_END(UCDataType)

ENUM_BEG(UCError, int32_t)
   ENUM_VALUE(OK,                   0)
   ENUM_VALUE(InvalidBuffer,        -0x200005)
ENUM_END(UCError)

ENUM_NAMESPACE_END(coreinit)

#include <common/enum_end.h>

#endif // ifdef COREINIT_ENUM_H
